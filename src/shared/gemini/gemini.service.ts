import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { LoggerService } from '../logger/logger.service';

@Injectable()
export class GeminiService {
  private genAI: GoogleGenerativeAI;

  constructor(
    private readonly configService: ConfigService,
    private readonly logger: LoggerService
  ) {
    const apiKey = this.configService.get<string>('GEMINI_API_KEY');
    if (!apiKey) {
      this.logger.warn('[GeminiService] GEMINI_API_KEY not configured');
    } else {
      this.genAI = new GoogleGenerativeAI(apiKey);
      this.logger.info('[GeminiService] Initialized successfully');
    }
  }

  async generateFinancialAdvice(prompt: string): Promise<string> {
    try {
      if (!this.genAI) {
        throw new Error('Gemini API not configured');
      }

      this.logger.info('[generateFinancialAdvice] Generating advice with Gemini');

      // Use gemini-2.0-flash-lite for free tier - most cost effective
      const model = this.genAI.getGenerativeModel({ 
        model: "gemini-2.0-flash-lite",
        generationConfig: {
          temperature: 0.7,
          topP: 0.9,
          maxOutputTokens: 1000, // Keep within reasonable limits
        },
      });

      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      this.logger.info('[generateFinancialAdvice] Successfully generated advice');
      return text;

    } catch (error) {
      this.logger.error('[generateFinancialAdvice] Error generating advice', error);
      
      // Fallback to local advice if API fails
      return this.generateLocalFallbackAdvice();
    }
  }

  private generateLocalFallbackAdvice(): string {
    return `
üéØ **PH√ÇN T√çCH T√ÄI CH√çNH T·ªîNG QUAN**

D·ª±a tr√™n th√¥ng tin t√†i ch√≠nh c·ªßa b·∫°n, ƒë√¢y l√† m·ªôt s·ªë g·ª£i √Ω c∆° b·∫£n:

üí∞ **ƒê√ÅNH GI√Å T√åNH H√åNH**
‚Ä¢ H√£y ƒë·∫£m b·∫£o c√≥ qu·ªπ kh·∫©n c·∫•p √≠t nh·∫•t 6 th√°ng chi ti√™u
‚Ä¢ C√¢n b·∫±ng t·ª∑ l·ªá n·ª£ so v·ªõi t√†i s·∫£n d∆∞·ªõi 30%
‚Ä¢ ƒêa d·∫°ng h√≥a danh m·ª•c ƒë·∫ßu t∆∞ theo ƒë·ªô tu·ªïi v√† kh·∫©u v·ªã r·ªßi ro

üìà **G·ª¢I √ù CHUNG**
‚Ä¢ Tr·∫ª (20-35): 70% c·ªï phi·∫øu, 20% tr√°i phi·∫øu, 10% ti·ªÅn m·∫∑t
‚Ä¢ Trung ni√™n (35-55): 60% c·ªï phi·∫øu, 30% tr√°i phi·∫øu, 10% ti·ªÅn m·∫∑t  
‚Ä¢ Cao tu·ªïi (55+): 40% c·ªï phi·∫øu, 50% tr√°i phi·∫øu, 10% ti·ªÅn m·∫∑t

üîî **L∆ØU √ù**: ƒê√¢y l√† g·ª£i √Ω t·ªïng qu√°t. H√£y tham kh·∫£o chuy√™n gia t√†i ch√≠nh ƒë·ªÉ c√≥ l·ªùi khuy√™n ph√π h·ª£p v·ªõi t√¨nh h√¨nh c·ª• th·ªÉ.

‚ú® **THEO D√ïI**: ƒê√°nh gi√° l·∫°i danh m·ª•c m·ªói 6 th√°ng v√† ƒëi·ªÅu ch·ªânh khi c·∫ßn thi·∫øt.
    `;
  }

  async testConnection(): Promise<boolean> {
    try {
      if (!this.genAI) {
        return false;
      }

      const model = this.genAI.getGenerativeModel({ model: "gemini-2.0-flash-lite" });
      const result = await model.generateContent("Test connection");
      const response = await result.response;
      
      return !!response.text();
    } catch (error) {
      this.logger.error('[testConnection] Gemini connection test failed', error);
      return false;
    }
  }
} 